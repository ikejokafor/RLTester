#include "RL.hpp"
#include "FixedPoint.hpp"
#include <iostream>
#include <fstream>
#include <algorithm> 

using namespace std;

typedef struct stateTuple {
	int param0_numFracBits;
	int param1_numFracBits;
	int stateEncoding;
} stateTuple_t;

// 0 param0_numFracBits up
// 1 param0_numFracBits dwn
// 2 param1_numFracBits up
// 3 param1_numFracBits dwn
// 4 param2_numFracBits up
// 5 param2_numFracBits dwn
// 6 stay


stateTuple_t *createStateSpace(int numStates, int numActionsPerState, int numFracBits, bool *validActionsPerState, int *transitionMatrix) {
	
	stateTuple_t *stateTuple = (stateTuple_t*)malloc(sizeof(stateTuple_t) * numStates);
	for (int i = 0; i < numStates; i++) {
		stateTuple[i].stateEncoding = -1;
	}
	
	stateTuple[0].param0_numFracBits = numFracBits;
	stateTuple[0].param1_numFracBits = numFracBits;
	stateTuple[0].stateEncoding = 0;
	
	for (int i = 0; i < numStates; i++) {		
		for (int j = 0; j < numActionsPerState; j++) {
			stateTuple_t nextState;
			nextState.param0_numFracBits = stateTuple[i].param0_numFracBits; 
			nextState.param1_numFracBits = stateTuple[i].param1_numFracBits; 
			nextState.stateEncoding		 = stateTuple[i].stateEncoding;
			// param 0 up
			if(j == 0 && stateTuple[i].param0_numFracBits < numFracBits) {
				nextState.param0_numFracBits = stateTuple[i].param0_numFracBits + 1;
				index2D(numStates, numActionsPerState, validActionsPerState, i, j) = true;
			} else if(j == 0 && stateTuple[i].param0_numFracBits == numFracBits) {
				index2D(numStates, numActionsPerState, validActionsPerState, i, j) = false;
			}
			// param 0 down
			if(j == 1 && stateTuple[i].param0_numFracBits > 2) {
				nextState.param0_numFracBits = stateTuple[i].param0_numFracBits - 1;
				index2D(numStates, numActionsPerState, validActionsPerState, i, j) = true;
			} else if(j == 1 && stateTuple[i].param0_numFracBits == 2) {
				index2D(numStates, numActionsPerState, validActionsPerState, i, j) = false;
			}
			// param 1 up
			if(j == 2 && stateTuple[i].param1_numFracBits < numFracBits) {
				nextState.param1_numFracBits = stateTuple[i].param1_numFracBits + 1;
				index2D(numStates, numActionsPerState, validActionsPerState, i, j) = true;
			} else if(j == 2 && stateTuple[i].param1_numFracBits == numFracBits) {
				index2D(numStates, numActionsPerState, validActionsPerState, i, j) = false;
			}
			// param 1 down
			if(j == 3 && stateTuple[i].param1_numFracBits > 2) {
				nextState.param1_numFracBits = stateTuple[i].param1_numFracBits - 1;
				index2D(numStates, numActionsPerState, validActionsPerState, i, j) = true;
			} else if(j == 3 && stateTuple[i].param1_numFracBits == 2) {
				index2D(numStates, numActionsPerState, validActionsPerState, i, j) = false;
			}
			// stay
			if(j == 4) {
				index2D(numStates, numActionsPerState, validActionsPerState, i, j) = true;
			}
			
			// check if next state encoding already exists
			int k;
			for (k = 0; k < numStates; k++) {
				if (stateTuple[k].param0_numFracBits == nextState.param0_numFracBits 
						&& stateTuple[k].param1_numFracBits == nextState.param1_numFracBits
						&& stateTuple[k].stateEncoding != -1) {
					index2D(numStates, numActionsPerState, transitionMatrix, i, j) = k;
					goto label0;
				}
			}
			// find a free State
			if(k == numStates) {
				for (k = 0; k < numStates; k++) {
					if (stateTuple[k].stateEncoding == -1) {
						stateTuple[k].param0_numFracBits = nextState.param0_numFracBits;
						stateTuple[k].param1_numFracBits = nextState.param1_numFracBits;
						stateTuple[k].stateEncoding = k;
						index2D(numStates, numActionsPerState, transitionMatrix, i, j) = k;
						break;
					}
				}
			}
			
			
			
			label0: continue;
		}
	}
	
	return stateTuple;
}


int main(int argc, char **argv) {
	
	int numFracBits = 8;
	
	int numStates = 49;
	int numActionsPerState = 5;
	ofstream fd;
	
	bool *validActionsPerState = (bool*)malloc(sizeof(bool) * numStates * numActionsPerState);
	int *transitionMatrix = (int*)malloc(numStates * numActionsPerState * sizeof(int));
	stateTuple_t *stateTuple = createStateSpace(numStates, numActionsPerState, numFracBits, validActionsPerState, transitionMatrix);

		
	QLearner agent(numStates, numActionsPerState, validActionsPerState, transitionMatrix, 0.0f);
	
	// print out valid actions per state
	fd.open("file1.txt");
	for (int i = 0; i < numStates; i++) {
		fd << "state: " << i << " , " << "FracBits: " << stateTuple[i].param0_numFracBits << ", " << stateTuple[i].param1_numFracBits << ", ";
		fd << "Valid Actions: ";
		for (int j = 0; j < numActionsPerState; j++) {
			fd << index2D(numStates, numActionsPerState, validActionsPerState, i, j) << " ";
		}
		fd << endl;
	}
	fd.close();
	
	// print out transition matrix
	fd.open("file2.txt");
	for (int i = 0; i < numStates; i++) {
		fd << "state: " << i << " , " << "FracBits: " << stateTuple[i].param0_numFracBits << ", " << stateTuple[i].param1_numFracBits << ", ";
		fd << "Transitions: ";	
		for (int j = 0; j < numActionsPerState; j++) {
			if (index2D(numStates, numActionsPerState, validActionsPerState, i, j)) {
				fd << index2D(numStates, numActionsPerState, transitionMatrix, i, j) << " ";
			}
			else {
				fd << -1 << " ";
			}
		}
		fd << endl;
	}
	fd.close();	
	
	
	float fl_a = 6.6f;
	float fl_b = 9.5f;
	
	float fl_res = fl_a * fl_b;

	
	FixedPoint_t fx_curr_a;
	FixedPoint_t fx_curr_b;
	FixedPoint_t fx_curr_res;

	FixedPoint_t fx_next_a;
	FixedPoint_t fx_next_b;
	FixedPoint_t fx_next_res;
	
	int action;
	float fl_curr_res_dout;
	float fl_next_res_dout;
	float reward = 0;
	int numEpochs = 100000;
	float errorThresh = 0.05f;
	float omega = 200.0f;
	int nextState;
	int currentLength;
	int nextLength;
	float currStateErr;
	float nextStateErr;
	float currStateRho;
	float nextStateRho;
	float rhoDiff;
	float lengthDiff;
	std::default_random_engine generator;
	std::bernoulli_distribution distribution(0.5);
	
	
	//for(int i = 0; i < numStates; i++) {	
	//
	//	fx_curr_a = FixedPoint::create(stateTuple[i].param0_numFracBits, fl_a);
	//	fx_curr_b = FixedPoint::create(stateTuple[i].param1_numFracBits, fl_b);
	//	
	//	
	//	fx_curr_res = fx_curr_a * fx_curr_b;		
	//	fl_curr_res_dout = FixedPoint::toFloat((stateTuple[i].param0_numFracBits + stateTuple[i].param1_numFracBits), fx_curr_res);
	//	currentLength = stateTuple[i].param0_numFracBits  + stateTuple[i].param1_numFracBits;
	//	
	//	currStateErr = fabsf(fl_res - fl_curr_res_dout) / fl_res;
	//	//currStateWht = ((1.0f - currStateErr) / float(currentLength)) * (exp(-currStateErr * 1.0f));
	//	currStateWht = (1.0f - currStateErr);
	//	if (currStateErr > errorThresh) {
	//		currStateWht = -1.0f;
	//	}
	//	cout << currStateWht << endl;
	//	
	//}
	//exit(0);
	
	srand(time(0));
	vector<int> states;
	// set some values:
	for(int i = 0 ; i < numStates ; ++i) states.push_back(i); 
	// using built-in random generator:
	std::random_shuffle(states.begin(), states.end());
	bool *probMat = (bool*)malloc(sizeof(bool) * numStates * numActionsPerState);
	for (int i = 0; i < (numStates * numActionsPerState); i++){
		probMat[i] = distribution(generator);
	}

	for(int i = 0; i < numStates; i++) { 
		agent.m_currentState = states[i];
		for (int j = 0; j < numEpochs; j++) {
			action = agent.GetNextAction();
			nextState = index2D(numStates, numActionsPerState, transitionMatrix, agent.m_currentState, action);
		
			currentLength = stateTuple[agent.m_currentState].param0_numFracBits + stateTuple[agent.m_currentState].param1_numFracBits;
			nextLength = stateTuple[nextState].param0_numFracBits + stateTuple[nextState].param1_numFracBits;
		

			fx_curr_a = FixedPoint::create(stateTuple[agent.m_currentState].param0_numFracBits, fl_a);
			fx_curr_b = FixedPoint::create(stateTuple[agent.m_currentState].param1_numFracBits, fl_b);
			fx_next_a = FixedPoint::create(stateTuple[nextState].param0_numFracBits, fl_a);
			fx_next_b = FixedPoint::create(stateTuple[nextState].param1_numFracBits, fl_b);	
				
			fx_curr_res = fx_curr_a * fx_curr_b;
			fx_next_res = fx_next_a * fx_next_b;
		
				
			fl_curr_res_dout = FixedPoint::toFloat((stateTuple[agent.m_currentState].param0_numFracBits 
													+ stateTuple[agent.m_currentState].param1_numFracBits),
													fx_curr_res);
		
			fl_next_res_dout = FixedPoint::toFloat((stateTuple[nextState].param0_numFracBits 
													+ stateTuple[nextState].param1_numFracBits),
													fx_next_res);

		
			currStateErr = (fabsf(fl_res - fl_curr_res_dout) / fl_res);
			nextStateErr = (fabsf(fl_res - fl_next_res_dout) / fl_res);
		
			if (nextStateErr <= errorThresh) {
				currStateRho = (1.0f - currStateErr);
				nextStateRho = (1.0f - nextStateErr);
				if (nextState == agent.m_currentState) {
					reward = currStateRho;
				} else {
					if (nextStateRho > currStateRho && nextLength < currentLength) {
						rhoDiff = nextStateRho - currStateRho;
						lengthDiff = 16.0f - (currentLength - nextLength);
						reward = currStateRho + rhoDiff / lengthDiff;
					} else if(nextStateRho < currStateRho && nextLength > currentLength) {
						rhoDiff = currStateRho - nextStateRho;
						lengthDiff = 16.0f - (nextLength - currentLength);
						reward = currStateRho - rhoDiff / lengthDiff;
					} else if(nextStateRho > currStateRho && nextLength > currentLength) {
						if(index2D(numStates, numActionsPerState, probMat, agent.m_currentState, action)) {
							rhoDiff = nextStateRho - currStateRho;
							lengthDiff = 16.0f - (nextLength - currentLength);
							reward = currStateRho + rhoDiff / lengthDiff;
						} else {
							rhoDiff = currStateRho - nextStateRho;
							lengthDiff = nextLength - currentLength;
							reward = currStateRho - rhoDiff * lengthDiff;
						}						
					} else if(nextStateRho < currStateRho && nextLength < currentLength) {
						if(index2D(numStates, numActionsPerState, probMat, agent.m_currentState, action)) {
							rhoDiff = currStateRho - nextStateRho;
							lengthDiff = 16.0f - (currentLength - nextLength);
							reward = currStateRho + rhoDiff / lengthDiff;
						} else {
							rhoDiff = currStateRho - nextStateRho;
							lengthDiff = 16.0f - (currentLength - nextLength);
							reward = currStateRho - rhoDiff / lengthDiff;
						}						
					}
				}
			} else  {
				reward = -FLT_MAX;
			}
	
		
			agent.UpdateQTable(reward);
		
		}
	}

	
	agent.PrintQMatrix();
	for (int i = 0; i < numStates; i++) {
		action = agent.GetBestAction(i);
		if (action == 4 && index2D(numStates, numActionsPerState, agent.m_QMatrix, i, action) != -1)
		{
			cout << i << endl;
		}
	}
	cout  << endl;
	
	
	int state = 31;		
	for (int i = 0; i < numStates; i++) {
		action = agent.GetBestAction(state);
		state = index2D(numStates, numActionsPerState, transitionMatrix, state, action);
	}
	cout << state << endl;
	cout << stateTuple[state].param0_numFracBits << ", " << stateTuple[state].param1_numFracBits << endl;
	fx_curr_a = FixedPoint::create(stateTuple[state].param0_numFracBits, fl_a);
	fx_curr_b = FixedPoint::create(stateTuple[state].param1_numFracBits, fl_b);
	cout << endl;



		
	return 0;
}